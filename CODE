from airflow import DAG
from datetime import timedelta, datetime 
from airflow.operators.python import PythonOperator
from airflow.operators.bash_operator import BashOperator
from airflow.providers.slack.operators.slack_webhook import SlackWebhookOperator
import requests
import pandas as pd


api_key = "41fb8165cf7a7752275b9842b64619aa"

default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2023, 1 ,8),
    'email': ['vaibhav146.star@gmail.com'],
    'email_on_failure': True,
    'email_on_retry': False,
    'retries' : 2,
    'retry_delay': timedelta(minutes=2)
}

def kelvin_to_farenheit(temp_in_kelvin):
    temp_in_farenheit = (temp_in_kelvin - 273.15) * (9/5) + 32
    return temp_in_farenheit


def etl_weather_data():
    combined_df = pd.DataFrame()
    names_of_city = ['Bangalore', 'San Francisco', 'Seattle', 'London', 'Austin', 'Dublin', 'Berlin', 'Toronto', 'New York City',
                    'Sydney', 'Tokyo', 'Singapore', 'Stockholm', 'Helsinki', 'Munich', 'Tel Aviv', 'Vancouver', 'Zurich', 'Shanghai', 'Barcelona']
    base_url = "https://api.openweathermap.org"
    for city in names_of_city:
        end_point = "/data/2.5/weather?q=" + city + "&appid=" + api_key
        full_url = base_url + end_point
        r = requests.get(full_url)
        data = r.json()


        city = data["name"]
        weather_description = data["weather"][0]["description"]
        temp_farenheit = kelvin_to_farenheit(data["main"]["temp"])
        feels_like_farenheit = kelvin_to_farenheit(data["main"]["feels_like"])
        min_temp_farenheit = kelvin_to_farenheit(data["main"]["temp_min"])
        max_temp_farenheit = kelvin_to_farenheit(data["main"]["temp_max"])
        pressure = data["main"]["pressure"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        time_of_record = datetime.utcfromtimestamp(data["dt"] + data["timezone"])
        sunrise_time = datetime.utcfromtimestamp(data["sys"]["sunrise"] + data["timezone"])
        sunset_time = datetime.utcfromtimestamp(data["sys"]["sunset"] + data["timezone"])

        transformed_data = {"City":city,
                            "Description":weather_description,
                            "Temperature (F)":temp_farenheit,
                            "Feels Like (F)":feels_like_farenheit,
                            "Minimum Temp (F)":min_temp_farenheit,
                            "Maximum Temp (F)":max_temp_farenheit,
                            "Pressure" : pressure,
                            "Humidity" : humidity,
                            "Wind Speed" : wind_speed,
                            "Time of Record" :time_of_record,
                            "Sunrise Time": sunrise_time,
                            "Sunset Time": sunset_time
        }

        transformed_data_list = [transformed_data]
        df_data = pd.DataFrame(transformed_data_list)
        combined_df = pd.concat([combined_df, df_data], ignore_index=True)

    now = datetime.now()
    dt_string = now.strftime("%d%m%Y%H%M%S")
    dt_string_final = 'current_weather_data_' + dt_string
    combined_df.to_csv(f"{dt_string_final}.csv", index=False)
    output_file = f"/home/ubuntu/{dt_string_final}.csv"
    return output_file


with DAG('weather_dag',
        default_args= default_args,
        schedule_interval = '@daily',
        catchup=False) as dag:

        extract_transform_weather_data = PythonOperator(
            task_id = 'tsk_extract_transform_weather_data',
            python_callable = etl_weather_data
        )


        load_to_s3 = BashOperator(
            task_id = 'tsk_load_to_s3',
            bash_command = 'aws s3 mv {{ti.xcom_pull("tsk_extract_transform_weather_data")}} s3://airflow-slack-multiple-cities',
        )

        slack_notifications = SlackWebhookOperator(
            task_id = 'tsk_slack_notifications',
            http_conn_id = "slack_conn_id",
            message = "Hi Vaibhav verma!",
            channel = '#weatherdata'
        )


        extract_transform_weather_data >> load_to_s3 >> slack_notifications
